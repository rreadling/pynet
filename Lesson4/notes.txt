Dictionaries

In [1]: net_device = {}

In [2]: type(net_device)
Out[2]: dict

In [3]: net_device['ip_addr'] = '192.168.1.1'

In [4]: net_device
Out[4]: {'ip_addr': '192.168.1.1'}

In [5]: var1 = 'vendor'

In [6]: net_device[var1] = 'cisco'

In [7]: net_device['device_type'] = 'ios'

In [8]: net_device
Out[8]: {'ip_addr': '192.168.1.1', 'vendor': 'cisco', 'device_type': 'ios'}

In [9]: net_device['device_type']
Out[9]: 'ios'

In [10]: net_device['vendor']
Out[10]: 'cisco'

In [11]: net_device['vendor'] = 'juniper'

In [12]: net_device
Out[12]: {'ip_addr': '192.168.1.1', 'vendor': 'juniper', 'device_type': 'ios'}

In [13]: net_device['model']
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-13-857d01fb1284> in <module>
----> 1 net_device['model']

KeyError: 'model'

In [14]: net_device2 = net_device

In [15]: net_device2 is net_device
Out[15]: True

Dictionaries Methods

In [16]: net_device
Out[16]: {'ip_addr': '192.168.1.1', 'vendor': 'juniper', 'device_type': 'ios'}

In [17]: net_device.get('model')

In [18]: print(net_device.get('model'))
None

In [19]: net_device.get('model', '881')
Out[19]: '881'

In [20]: print(net_device.get('vendor'))
juniper

In [21]: print(net_device.get('model'))
None

In [22]: net_device['vendor'] = 'cisco'

In [23]: net_device
Out[23]: {'ip_addr': '192.168.1.1', 'vendor': 'cisco', 'device_type': 'ios'}

In [26]: dir(dict)
Out[26]:
['__class__',
 '__contains__',
 '__delattr__',
 '__delitem__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__getitem__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__iter__',
 '__le__',
 '__len__',
 '__lt__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__reversed__',
 '__setattr__',
 '__setitem__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 'clear',
 'copy',
 'fromkeys',
 'get',
 'items',
 'keys',
 'pop',
 'popitem',
 'setdefault',
 'update',
 'values']

In [27]: net_device2 = net_device.copy()

In [28]: net_device2
Out[28]: {'ip_addr': '192.168.1.1', 'vendor': 'cisco', 'device_type': 'ios'}

In [30]: net_device2 is net_device
Out[30]: False

In [31]: net_device['model'] =  '881'

In [32]: net_device
Out[32]:
{'ip_addr': '192.168.1.1',
 'vendor': 'cisco',
 'device_type': 'ios',
 'model': '881'}

In [33]: net_device.pop('model')
Out[33]: '881'

In [34]: net_device
Out[34]: {'ip_addr': '192.168.1.1', 'vendor': 'cisco', 'device_type': 'ios'}

In [35]: net_device.update(net_device2)

In [36]: net_device
Out[36]: {'ip_addr': '192.168.1.1', 'vendor': 'cisco', 'device_type': 'ios'}

In [37]: net_device2 = {'model': '881'}

In [38]: net_device.update(net_device2)

In [39]: net_device
Out[39]:
{'ip_addr': '192.168.1.1',
 'vendor': 'cisco',
 'device_type': 'ios',
 'model': '881'}

In [40]: for key in net_device:
    ...:     print(key)
    ...:
ip_addr
vendor
device_type
model

In [43]: for v in net_device.values():
    ...:     print(v)
    ...:
    ...:
192.168.1.1
cisco
ios
881

In [44]: for k, v in net_device.items():
    ...:     print(k)
    ...:     print(v)
    ...:     print('-' * 30)
    ...:
ip_addr
192.168.1.1
------------------------------
vendor
cisco
------------------------------
device_type
ios
------------------------------
model
881
------------------------------

Sets

In [1]: my_ipaddresses = ['192.168.1.1', '10.220.17.9', '33.1.1.1', '8.8.8.8', '192.168.1.1']

In [2]: my_ipaddresses
Out[2]: ['192.168.1.1', '10.220.17.9', '33.1.1.1', '8.8.8.8', '192.168.1.1']

In [3]: set(my_ipaddresses)
Out[3]: {'10.220.17.9', '192.168.1.1', '33.1.1.1', '8.8.8.8'}

In [4]: set_ips = set(my_ipaddresses)

In [5]: type(set_ips)
Out[5]: set

In [6]: set_ips = {'10.220.17.9', '192.168.1.1', '33.1.1.1', '8.8.8.8'}

In [7]: set_ips2 = {'10.220.17.9', '192.168.1.1', '8.8.4.4', '172.31.254.1'}

In [8]: set_ips | set_ips2
Out[8]:
{'10.220.17.9',
 '172.31.254.1',
 '192.168.1.1',
 '33.1.1.1',
 '8.8.4.4',
 '8.8.8.8'}

In [9]: set_ips & set_ips2
Out[9]: {'10.220.17.9', '192.168.1.1'}

In [10]: set_ips.union(set_ips2)
Out[10]:
{'10.220.17.9',
 '172.31.254.1',
 '192.168.1.1',
 '33.1.1.1',
 '8.8.4.4',
 '8.8.8.8'}

In [11]: set_ips.intersection(set_ips2)
Out[11]: {'10.220.17.9', '192.168.1.1'}

In [12]: set_ips - set_ips2
Out[12]: {'33.1.1.1', '8.8.8.8'}

In [13]: set_ips2 - set_ips
Out[13]: {'172.31.254.1', '8.8.4.4'}

In [14]: set_ips ^ set_ips2
Out[14]: {'172.31.254.1', '33.1.1.1', '8.8.4.4', '8.8.8.8'}

In [15]: set_ips.difference(set_ips2)
Out[15]: {'33.1.1.1', '8.8.8.8'}

In [16]: set_ips.symmetric_difference(set_ips2)
Out[16]: {'172.31.254.1', '33.1.1.1', '8.8.4.4', '8.8.8.8'}



Regular Expressions

In [1]: import re

In [2]: line = "10.220.100.1"

In [3]: ip_addr = line

In [4]: re.search(r".", ip_addr)
Out[4]: <re.Match object; span=(0, 1), match='1'>

In [5]: re.search(r"X", ip_addr)

In [6]: re.search(r".", ip_addr).group(0)
Out[6]: '1'

In [7]: re.search(r"..", ip_addr).group(0)
Out[7]: '10'

In [9]: re.search(r"...", ip_addr).group(0)
Out[9]: '10.'

In [10]: re.search(r"......", ip_addr).group(0)
Out[10]: '10.220'

In [11]: re.search(r".+", ip_addr).group(0)
Out[11]: '10.220.100.1'

In [12]: re.search(r".+", ip_addr)
Out[12]: <re.Match object; span=(0, 12), match='10.220.100.1'>

In [13]: re.search(r".*", ip_addr)
Out[13]: <re.Match object; span=(0, 12), match='10.220.100.1'>

In [14]: re.search(r".*", "")
Out[14]: <re.Match object; span=(0, 0), match=''>

In [15]: re.search(r"^.+$", ip_addr)
Out[15]: <re.Match object; span=(0, 12), match='10.220.100.1'>

In [16]: re.search(r"\d,", ip_addr)

In [17]: re.search(r"\d", ip_addr)
Out[17]: <re.Match object; span=(0, 1), match='1'>

In [18]: re.search(r"\d", ip_addr).group
Out[18]: <function Match.group>

In [19]: re.search(r"\d", ip_addr).group(0)
Out[19]: '1'

In [20]: re.search(r"\d\d\d", ip_addr).group(0)
Out[20]: '220'

In [21]: re.search(r"\d+", ip_addr).group(0)
Out[21]: '10'

In [22]: re.search(r"^\d+", ip_addr).group(0)
Out[22]: '10'

In [24]: re.search(r"\d+$", ip_addr).group(0)
Out[24]: '1'

In [25]: ip_addr = '     10.220.100.1     '

In [26]: re.search(r"^\s+", ip_addr)
Out[26]: <re.Match object; span=(0, 5), match='     '>

In [28]: re.search(r"^\s+\d+", ip_addr)
Out[28]: <re.Match object; span=(0, 7), match='     10'>

In [29]: re.search(r"^\s+\S+", ip_addr)
Out[29]: <re.Match object; span=(0, 17), match='     10.220.100.1'>

In [30]: re.search(r"^\s+\S+\s+", ip_addr)
Out[30]: <re.Match object; span=(0, 22), match='     10.220.100.1     '>

In [31]: re.search(r"^\s+[\d\.]", ip_addr)
Out[31]: <re.Match object; span=(0, 6), match='     1'>

In [32]: re.search(r"^\s+[\d\.]+", ip_addr)
Out[32]: <re.Match object; span=(0, 17), match='     10.220.100.1'>

In [33]: re.search(r"^\s+(\S+)", ip_addr)
Out[33]: <re.Match object; span=(0, 17), match='     10.220.100.1'>

In [34]: re.search(r"^\s+(\S+)", ip_addr).group(0)
Out[34]: '     10.220.100.1'

In [35]: re.search(r"^\s+(\S+)", ip_addr).group(1)
Out[35]: '10.220.100.1'

In [37]: re.search(r"^\s+(\S+)", ip_addr).groups()
Out[37]: ('10.220.100.1',)

Always use raw strings r"" to remove special meaning of python characters

In [41]: line = 'Cisco IOS Software, C880 Software (C880DATA-UNIVERSALK9-M), Version 15.4(2)T1, RELEASE SOFTWARE (fc3)'
    ...:

In [42]: line
Out[42]: 'Cisco IOS Software, C880 Software (C880DATA-UNIVERSALK9-M), Version 15.4(2)T1, RELEASE SOFTWARE (fc3)'

In [43]: re.search(r"^Cisco.*, Version (\S+),.*$", line)
Out[43]: <re.Match object; span=(0, 101), match='Cisco IOS Software, C880 Software (C880DATA-UNIVE>

In [44]: re.search(r"^Cisco.*, Version (\S+),.*$", line).group(0)
Out[44]: 'Cisco IOS Software, C880 Software (C880DATA-UNIVERSALK9-M), Version 15.4(2)T1, RELEASE SOFTWARE (fc3)'

In [46]: re.search(r"^Cisco.*, Version (\S+),.*$", line).group(1)
Out[46]: '15.4(2)T1'

In [49]: re.search(r"^Cisco.*, Version (?P<serial_num>\S+),.*$", line)
Out[49]: <re.Match object; span=(0, 101), match='Cisco IOS Software, C880 Software (C880DATA-UNIVE>


In [51]: re.search(r"^Cisco.*, Version (?P<serial_num>\S+),.*$", line).groupdict()
Out[51]: {'serial_num': '15.4(2)T1'}

                                                                                                             
re.search(r"^Processor Board ID (.*)$", output, flags=re.M) multiline

re.search(r"^Cisco.*", output, flags=re.DOTALL)  .* will include newlines

re.search(r"^Cisco.*", output, flags=re.I) ignore capitalization

re.split() split using a regexp pattern

re.sub(pattern, replacement, string)

re.findall(pattern, string, flags=0) find all occurrences in a large data string.

